using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

/**
 * Survive the wrath of Kutulu
 * Coded fearlessly by JohnnyYuge & nmahoude (ok we might have been a bit scared by the old god...but don't say anything)
 **/
public class Point
{
	public int x;
	public int y;
	public Point() {}
	public Point(int x,int y)
	{
		this.x = x;
		this.y = y;
	}
	public void SetXY(int x, int y)
	{
	    this.x = x;
	    this.y = y;
	}
}	

public class Vector
{
    public double x;
    public double y;
    public void SetXY(double x, double y) {this.x=x;this.y=y;}
    public Vector (double x, double y) {this.x=x;this.y=y;}
    public Vector () {this.x=0.0f;this.y=0.0f;}
    public double Norm2() {return x*x+y*y;}
    public double Norm() {return Math.Sqrt(Norm2());}
    public static Vector operator+ (Vector a,Vector b) 
    {
        Vector res = new Vector(a.x+b.x,a.y+b.y);
        return res;
    }
    public static Vector operator- (Vector a,Vector b) 
    {
        Vector res = new Vector(a.x-b.x,a.y-b.y);
        return res;
    }
    public static double Cross (Vector a,Vector b) 
    {
        return a.x*b.y-a.y*b.x;
    }
    public static double operator* (Vector a, Vector b)
    {
        return a.x*b.x + a.y*b.y;
    }
    public static Vector Rotation (Vector a, double b) // en degres
    {
        b *= Math.PI/180.0f;
        Vector res = new Vector(a.x*Math.Cos(b)+a.y*Math.Sin(b),-a.x*Math.Sin(b)+a.y*Math.Cos(b));
        return res;
    }
    public static Vector Rot_Affine(Vector point, Vector a, double b)
    {
        return (point + Rotation(a, b));
    }
    public static double Angle_Vec(Vector orig, Vector dest) // Renvoie le cos de l'angle de 2 vecteurs
    {
        return (orig*dest/orig.Norm()/dest.Norm());
    }
}

public class Plateau
{
    public string[] Tab;
    public int width;
    public int height;
    
    public Plateau (string[] Tab, int width, int height)
    {
        this.Tab = Tab;
        this.width = width;
        this.height = height;
    }
    
}

public class Entite{
	public int x;
	public int y;
	public int Id;
	public Entite (Point p, int Id)
	{
		this.x 		= p.x;
		this.y		= p.y;
		this.Id     = Id;
	}
}

public class Joueur:Entite
{
	public int sante;
	public Joueur (Point p_j, int sante, int Id) : base(p_j, Id)
	{
		this.sante 	= sante;
	}
}

public class Hero:Entite
{
	public int sante;
	public Hero(Point p_h, int sante, int Id) : base(p_h, Id)
	{
		this.sante 	= sante;
	}
	public void Update (Point p, int sante_Hero)
	{
	    this.x     = p.x;
	    this.y     = p.y;
	    this.sante = sante_Hero;
	}
}

public class Wanderer:Entite
{
    public bool isWandering;
    public int cible;
    public int temps;
    public Wanderer(Point p_w, bool isWandering, int temps, int Id, int cible) : base(p_w, Id)
    {
        this.x = p_w.x;
        this.y = p_w.y;
        this.isWandering = isWandering;
        this.temps = temps;
        this.cible = cible;
    }
}

public class Joueur_Controller{
	public Hero hero;
	public List<Joueur> joueurs;
	public List<Wanderer> wanderers;
	public int Nb_joueurs = 3;
	public int sanityLossLonely;
	public int sanityLossGroup;
	public int wandererSpawnTime;
	public int wandererLifeTime;
	
	public Joueur_Controller(int sanityLossLonely, int sanityLossGroup, 
	                         int wandererSpawnTime, int wandererLifeTime)
	{
		hero = null;
		joueurs = new List<Joueur>();
	    wanderers = new List<Wanderer>();
		this.sanityLossLonely = sanityLossLonely;
		this.sanityLossGroup = sanityLossGroup;
		this.wandererSpawnTime = wandererSpawnTime;
		this.wandererLifeTime = wandererLifeTime;
	   
	}
	
	public void Update(Point pos_Hero, int sante_Hero, int Id_Hero,
	                List<Point> pos_Joueurs, List<int> sante_Joueurs, List<int> id_J,
					List<int> id_Wanderer, List<Point> pos_Wanderer, List<bool> is_Wandering, List<int> temps_Wanderer, List<int> cible_Wandering)
	{
		
		// Update du hero
		if (hero == null)
    		hero = new Hero(pos_Hero, sante_Hero, Id_Hero);
		hero.Update(pos_Hero, sante_Hero);
		
		// Update des joueurs
		List<int> A_retirer = new List<int>();
		foreach (Joueur j in joueurs)
			if (id_J.Any(p => p==j.Id))
			    A_retirer.Add(j.Id);
	    foreach (int i in A_retirer)
	        joueurs.RemoveAll(n=>n.Id==i);

	    
	    // Update des wanderers
	    A_retirer.Clear();
		foreach (Wanderer j in wanderers)
			if (id_Wanderer.Any(p => p==j.Id))
			    A_retirer.Add(j.Id);
	    foreach (int i in A_retirer)
	        wanderers.RemoveAll(n=>n.Id==i);
	    for (int i=0;i<id_Wanderer.Count();i++)
	        if (!wanderers.Any(n=> n.Id==id_Wanderer[i]))
	            wanderers.Add(new Wanderer(pos_Wanderer[i],is_Wandering[i],temps_Wanderer[i],
	                            id_Wanderer[i],cible_Wandering[i]));
	    
	}
}

public class Jeu
{
	public Plateau plateau;
	public Joueur_Controller joueur_Controller;
	public Jeu(string[] Tab, int width, int height, int sanityLossLonely,
		                int sanityLossGroup, int wandererSpawnTime, int wandererLifeTime)
	{
		plateau             = new Plateau(Tab, width, height);
		joueur_Controller   = new Joueur_Controller(sanityLossLonely,
		                                            sanityLossGroup,
		                                            wandererSpawnTime,
		                                            wandererLifeTime);
	}
	
	public void Update(Point pos_Hero, int sante_Hero,int id_Hero,
	                List<Point> pos_Joueurs, List<int> sante_Joueurs, List<int> id_J,
					List<int> id_Wanderer, List<Point> pos_Wanderer, List<bool> is_Wandering, List<int> temps_Wanderer, List<int> cible_Wandering)
	{
		joueur_Controller.Update(pos_Hero, sante_Hero, id_Hero,
	                pos_Joueurs, sante_Joueurs, id_J,
					id_Wanderer,pos_Wanderer, is_Wandering, temps_Wanderer, cible_Wandering);
	}
	
	public string Commande()
	{
		string resultat = "WAIT";
		return resultat;
	}
}

class Player
{
    static void Main(string[] args)
    {
        string[] inputs;
        int width = int.Parse(Console.ReadLine());
        int height = int.Parse(Console.ReadLine());
        
        // Infos hero
        int id_Hero = -1;
		int sante_Hero = -1;
		Point pos_Hero = new Point();

        // Infos joueurs
        List<int> id_Joueurs = new List<int>();
        List<int> sante_Joueurs = new List<int>();
        List<Point> pos_Joueurs = new List<Point>();
        
        // Infos Wanderer
        List<Point> pos_Wanderer = new List<Point>();
        List<int> id_Wanderer = new List<int>();
        List<int> temps_Wanderer = new List<int>();
        List<bool> is_Wandering= new List<bool>();
        List<int> cible_Wandering = new List<int>();
        
        string[] line = new string[height];
		Jeu jeu;
        for (int i = 0; i < height; i++)
        {
            line[i] = Console.ReadLine();
        }
        inputs = Console.ReadLine().Split(' ');
        int sanityLossLonely = int.Parse(inputs[0]); // how much sanity you lose every turn when alone, always 3 until wood 1
        int sanityLossGroup = int.Parse(inputs[1]); // how much sanity you lose every turn when near another player, always 1 until wood 1
        int wandererSpawnTime = int.Parse(inputs[2]); // how many turns the wanderer take to spawn, always 3 until wood 1
        int wandererLifeTime = int.Parse(inputs[3]); // how many turns the wanderer is on map after spawning, always 40 until wood 1

		jeu = new Jeu(line, width, height,
		                sanityLossLonely,
		                sanityLossGroup,
		                wandererSpawnTime,
		                wandererLifeTime);
        
        // game loop
        while (true)
        {
            // Clear des listes
            pos_Wanderer.Clear();
            id_Wanderer.Clear();
            temps_Wanderer.Clear();
            is_Wandering.Clear();
            cible_Wandering.Clear();
            id_Joueurs.Clear();
            sante_Joueurs.Clear();
            pos_Joueurs.Clear();
            
            int entityCount = int.Parse(Console.ReadLine()); // the first given entity corresponds to your explorer
            for (int i = 0; i < entityCount; i++)
            {
                inputs = Console.ReadLine().Split(' ');
                string entityType = inputs[0];
                int id = int.Parse(inputs[1]);
                int x = int.Parse(inputs[2]);
                int y = int.Parse(inputs[3]);
                int param0 = int.Parse(inputs[4]);
                int param1 = int.Parse(inputs[5]);
                int param2 = int.Parse(inputs[6]);
                if (i==0)
                {
                    pos_Hero.SetXY(x,y);
                    sante_Hero  = param0;
                    id_Hero     = id;
                }
                else if (entityType=="EXPLORER") // Cas explorer
                {
                    pos_Joueurs.Add(new Point(x,y));
                    sante_Joueurs.Add(param0);
                    id_Joueurs.Add(id);
                }
                else // Cas wanderer
                {
                    id_Wanderer.Add(id);
                    pos_Wanderer.Add(new Point(x,y));
                    is_Wandering.Add(param1==1);
                    temps_Wanderer.Add(param0);
                    cible_Wandering.Add(param2);
                }
            }

			jeu.Update(pos_Hero, sante_Hero, id_Hero,pos_Joueurs,sante_Joueurs, id_Joueurs, 
				id_Wanderer, pos_Wanderer, is_Wandering, temps_Wanderer, cible_Wandering);

            Console.WriteLine(jeu.Commande());
        }
    }
}